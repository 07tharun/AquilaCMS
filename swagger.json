{
    "info" : {
        "version" : "2.0.0",
        "title"   : "Documentation for AquilaCMS's API",
        "description":"## PostBody usage\r\nMost of the time, there are no GET routes to get items. You must use a POST route with a single parameter call <code>PostBody</code>.\r\nHere's how to use it.\r\n### Structure\r\nHere is the structure of a PostBody object :\r\n\r\n     {\r\n       \"lang\" : \"fr\",\r\n       \"PostBody\" : {\r\n           \"limit\" : 10,\r\n           \"filter\" : {\r\n                \"field1\" : \"filter_value\",\r\n                \"field2\" : \"other_filter_value\",\r\n           },\r\n           structure\" : {\r\n               \"field1\" : 1,\r\n               \"field3\" : 0,\r\n           }\r\n       }\r\n     }\r\n#### Explain ####\r\n<code>PostBody.limit</code> : Number of items eturned. The default value is 1\r\n\r\n<code>PostBody.filter</code> : Allows you to filter the datas. It's an object based on the mongodb's $filter(aggregation) :  <https://docs.mongodb.com/manual/reference/operator/aggregation/filter/>\r\n\r\n<code>PostBody.structure</code> : Returns the desired object structure. It's an object based on the mongodb's projection : <https://docs.mongodb.com/manual/reference/operator/projection/positional/>\r\n\r\n<code>PostBody.populate</code> : sk to populate fields in this array.\r\n\r\n<code>PostBody.skip</code> : skip a specific amount of element from the request. The default value is 0\r\n\r\n<code>PostBody.sort</code> : sort. It's an object based on the mongodb's sort : https://docs.mongodb.com/manual/reference/method/cursor.sort/>\r\n\r\n<code>PostBody.page</code> : page. The default value is null\r\n### Returned Data\r\nMost APIs return an object including an array of the requested object :\r\n\r\n     {\r\n       \"datas\": [{\r\n           \"_id\": \"5ba2015b49ceac42b4a16865\",\r\n           \"field1\": \"value1\",\r\n           \"field2\": {\r\n                \"field21\": \"value21\",\r\n                \"field22\": \"value22\"\r\n           }\r\n       }],\r\n       \"count\": 1\r\n     }\r\n\r\n\r\nWhen the route can returns items, they are included in array named <code>datas</code>. The <code>count</code> fields indicates the total number of items matching this equest (ie for pagination).\r\n\r\nIf only one item can be return, the object is directly at the root.\r\n\r\nThe schemas of the collections possibly include translations. It's in the <code>translation</code> field. When API is call with PostBody, the language fields (and his childrens) contained in <code>translation</code> are automatically moved at the root (of translation field).",
        "licence" : {
            "name" : "OSL3.0"
        }
    },
    "security" : {
        "api_key": {
            "type": "apiKey",
            "in": "header",
            "name": "Authorization"
        }
    },
    "filesPattern" : ["routes/*.js", "orm/schemas/*.js", "documentations/types.js"],
    "schemes": ["http", "https"]
}